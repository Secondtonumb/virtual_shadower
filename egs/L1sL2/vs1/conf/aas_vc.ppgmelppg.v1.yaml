###########################################################
#                FEATURE EXTRACTION SETTING               #
###########################################################
sampling_rate: 16000     # Sampling rate.
fft_size: 1024           # FFT size.
hop_size: 256            # Hop size.
win_length: null         # Window length.
                         # If set to null, it will be the same as fft_size.
window: "hann"           # Window function.
num_mels: 80             # Number of mel basis.
fmin: 80                 # Minimum freq in mel basis calculation.
fmax: 7600               # Maximum frequency in mel basis calculation.
global_gain_scale: 1.0   # Will be multiplied to all of waveform.
trim_silence: false      # Whether to trim the start and end of silence.
trim_threshold_in_db: 60 # Need to tune carefully if the recording is not good.
trim_frame_size: 2048    # Frame size in trimming.
trim_hop_size: 512       # Hop size in trimming.
format: "hdf5"           # Feature file format. "npy" or "hdf5" is supported.

feat_list:
    mel: {}
    ppg_sxliu:
        checkpoint: downloads/s3prl-vc-ppg_sxliu/checkpoint-50000steps.pkl
src_feat: ppg_sxliu
trg_feat: mel
duration_predictor_feat: "ppg_sxliu"

###########################################################
#              NETWORK ARCHITECTURE SETTING               #
###########################################################
model_type: AASVC
model_params:
    idim: 144
    odim: 80
    adim: 384         # attention dimension
    aheads: 2         # number of attention heads
    elayers: 4        # number of encoder layers
    eunits: 1536      # number of encoder ff units
    dlayers: 4        # number of decoder layers
    dunits: 1536      # number of decoder ff units
    positionwise_layer_type: linear   # type of position-wise layer
    positionwise_conv_kernel_size: 1  # kernel size of position wise conv layer
    duration_predictor_use_encoder_outputs: False
    duration_predictor_input_dim: 144
    duration_predictor_layers: 2                 # number of layers of duration predictor
    duration_predictor_chans: 256                # number of channels of duration predictor
    duration_predictor_kernel_size: 3            # filter size of duration predictor
    postnet_layers: 5                            # number of layers of postnset
    postnet_filts: 5                             # filter size of conv layers in postnet
    postnet_chans: 256                           # number of channels of conv layers in postnet
    use_masking: True                            # whether to apply masking for padded part in loss calculation
    encoder_normalize_before: True               # whether to perform layer normalization before the input
    decoder_normalize_before: True               # whether to perform layer normalization before the input
    encoder_reduction_factor: 1                  # encoder reduction factor
    post_encoder_reduction_factor: 4             # post encoder reduction factor
    decoder_reduction_factor: 1                  # decoder reduction factor
    encoder_type: conformer                      # encoder type
    decoder_type: conformer                      # decoder type
    duration_predictor_type: stochastic          # type of duration predictor. choices: [deterministic, stochastic]
    encoder_input_layer: linear                  # type of position-wise layer
    conformer_pos_enc_layer_type: rel_pos        # conformer positional encoding type
    conformer_self_attn_layer_type: rel_selfattn # conformer self-attention type
    use_macaron_style_in_conformer: true         # whether to use macaron style in conformer
    use_cnn_in_conformer: true                   # whether to use CNN in conformer
    conformer_enc_kernel_size: 15                # kernel size in CNN module of conformer-based encoder
    conformer_dec_kernel_size: 15                # kernel size in CNN module of conformer-based decoder
    init_type: xavier_uniform                    # initialization type
    transformer_enc_dropout_rate: 0.2            # dropout rate for transformer encoder layer
    transformer_enc_positional_dropout_rate: 0.2 # dropout rate for transformer encoder positional encoding
    transformer_enc_attn_dropout_rate: 0.2       # dropout rate for transformer encoder attention layer
    transformer_dec_dropout_rate: 0.2            # dropout rate for transformer decoder layer
    transformer_dec_positional_dropout_rate: 0.2 # dropout rate for transformer decoder positional encoding
    transformer_dec_attn_dropout_rate: 0.2       # dropout rate for transformer decoder attention layer

###########################################################
#                      LOSS SETTING                       #
###########################################################
trainer_type: AASVCTrainer
collater_type: NARVCCollater
criterions:
    "L1Loss": {}
    "ForwardSumLoss": {}
    "StochasticDurationPredictorLoss": {}
lambda_align: 2.0

###########################################################
#                   INFERENCE SETTING                     #
###########################################################
# vocoder:
#     checkpoint: ../vc1/downloads/pwg_slt/checkpoint-400000steps.pkl
#     config: ../vc1/downloads/pwg_slt/config.yml
#     stats: ../vc1/downloads/pwg_slt/stats.h5

vocoder:
    vocoder_type: "s3prl_vc"
    checkpoint: "./downloads/ppg_sxliu_decoder_V006/checkpoint-38000steps.pkl"
    stats: "./downloads/ppg_sxliu_decoder_V006/stats.h5"
    config: "./downloads/ppg_sxliu_decoder_V006/config.yml"

###########################################################
#                  DATA LOADER SETTING                    #
###########################################################
batch_size: 16                  # Batch size.
pin_memory: true                # Whether to pin memory in Pytorch DataLoader.
num_workers: 0                  # Number of workers in Pytorch DataLoader.
allow_cache: true               # Whether to allow cache in dataset. If true, it requires cpu memory.
mp: false                       # Setting this to false avoids error in multi-gpu machines.
gradient_accumulate_steps: 1    # Number of forward steps before a backward step. Used when OOM happens.

###########################################################
#             OPTIMIZER & SCHEDULER SETTING               #
###########################################################
optimizer_type: Adam
optimizer_params:
    lr: 0.00008             # Learning rate. See https://github.com/espnet/espnet/blob/master/espnet2/schedulers/noam_lr.py#L49-L50
grad_norm: 1.0              # Gradient norm.
scheduler: warmuplr
scheduler_params:
    warmup_steps: 4000      # Scheduler warm up step

###########################################################
#                    INTERVAL SETTING                     #
###########################################################
train_max_steps: 100000                 # Number of training steps.
dp_train_start_steps: 0                 # Duration predictor training starting step. Default set to 0.
save_interval_steps: 5000               # Interval steps to save checkpoint.
eval_interval_steps: 100                # Interval steps to evaluate the network.
log_interval_steps: 10                  # Interval steps to record the training log.

###########################################################
#                     OTHER SETTING                       #
###########################################################
num_save_intermediate_results: 4  # Number of results to be saved as intermediate results.
